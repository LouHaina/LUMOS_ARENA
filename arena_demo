
from arena import *
import random


import numpy as np
import matplotlib.pyplot as plt
import time

# variables
box_scaler = (0.3,0.3,0.3)
text_scaler = (0.3,0.3,0.3)
start_walk = 0

# record walk's position
x=[]
y=[]
z=[]


walk = Text(
    object_id="walk_txt",
    position=(0, 1.2, 0),
    text="start walking!",
    color="#555555",
    ttl = 5
)

start_txt = Text(
    object_id="start_txt",
    position=(0, 1.2, 0),
    text="Find Apriltag and click on 'find it' green tab!",
    scale=text_scaler,
    color="#555555",
    persist=True
)

def plot_walker_track():
    ax = plt.axes(projection ='3d')
    ax.plot3D(x, y, z, 'green')
    ax.set_xlim(0,5)
    ax.set_ylim(5,0)
    ax.set_zlim(0,5)
    plt.show()

def finish_handler(scene,evt,msg):
    global start_walk,x,y,z
    if evt.type == "mousedown":
        start_walk = 0
        plot_walker_track()     # walker's track will show 
                                # and other objects will be deleted
        scene.delete_object(finish_text)
        scene.delete_object(finish_box) # finish this program

find_text = Text(
    object_id="find",
    position=(0, 1, 0),
    text="find it!",
    color="#555555",
    scale = text_scaler,
    persist=True,      
)
finish_text = Text(
    object_id="finish",
    position=(0, 1.2, 0),
    text="finish!",
    color="#555555",
    scale = text_scaler,
    persist=True,      
)
finish_box = Box(
    object_id="finish_box",
    position=(0, 1, 0),
    scale=(0.1,0.1,0.01),
    clickable=True,
    color=(0, 255, 0),
    persist=True,
    evt_handler=finish_handler
)

walk = Text(
    object_id="walk_txt",
    position=(0, 1.2, 0),
    text="start walking!",
    color="#555555",
    scale = text_scaler,
    ttl = 3
)

def findtag_handler(scene,evt,msg):
    global start_walk
    if evt.type == "mousedown":
        # after finding April tag, tell user to walk
        start_walk = 1
        scene.delete_object(start_txt)
        scene.delete_object(find_text)
        scene.delete_object(find_box)
        scene.add_object(walk)
        time.sleep(3)
        scene.add_object(finish_text)
        scene.add_object(finish_box)


find_box = Box(
    object_id="find_box",
    position=(0, 0.8, 0),
    scale=(0.1,0.1,0.01),
    clickable=True,
    color=(0, 255, 0),
    persist=True,
    evt_handler=findtag_handler
)



class CameraState(Object):
    def __init__(self, camera):
        self.camera = camera
        self.prev_pos = None
        self.line_color = Color(
                random.randint(0,255),
                random.randint(0,255),
                random.randint(0,255)
            ) # not used

    @property
    def curr_pos(self):
        return self.camera.data.position

    @property
    def displacement(self):
        if self.prev_pos:
            return self.prev_pos.distance_to(self.curr_pos)
        else:
            return 0

cam_states = []

def user_join_callback(scene, cam, msg):
    global cam_states

    cam_state = CameraState(cam)
    cam_states += [cam_state]

# scene name should match the scene you build
scene = Scene(host="mqtt.arenaxr.org", scene="test")
scene.user_join_callback = user_join_callback

# if user start to walk then record the location
@scene.run_forever(interval_ms=200)
def track_camera():
    if start_walk == 1:
        for cam_state in cam_states:
            print(cam_state.curr_pos)
            x.append(cam_state.curr_pos['x'])
            y.append(-cam_state.curr_pos['z'])
            z.append(cam_state.curr_pos['y'])
            
            cam_state.prev_pos = cam_state.curr_pos

@scene.run_once
def main():
    scene.add_object(start_txt)
    scene.add_object(find_text)
    scene.add_object(find_box)


scene.run_tasks() 

